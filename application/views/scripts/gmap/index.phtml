<?php 
$customer_tower_code = array('Indus Towers Limited'=>'cust-i', 'Bharti Airtel Limited'=> 'cust-b' );
$customer_call_type_code = array('BD'=>'call-b', 'PM'=>'call-p');
$customer_product_type_code = array('AC'=>'product-a','PIU'=>'product-p');
//print_r($this->single_path_coord);
$this->gpsdata=array();
foreach($this->single_path_coord as $val)
{
    array_push($this->gpsdata,$val['mob_user_staff_code']);
}

$str=json_encode($this->single_path_coord);


?>
<!DOCTYPE html>
<html>
  <head>
    <title>User Map</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
      html, body, #map-canvas {
        height: 100%;
        margin: 0px;
        padding: 0px
	}
    </style>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD67PS69UkNREHH5pkb1E-zCy7iWKSNgE4&libraries=geometry"></script>
    <script>
var map, setArrows;

 function ArrowHandler() {
  this.setMap(map);
  // Markers with 'head' arrows must be stored
  this.arrowheads = [];
 }
 // Extends OverlayView from the Maps API
 ArrowHandler.prototype = new google.maps.OverlayView();

 // Draw is inter alia called on zoom change events.
 // So we can use the draw method as zoom change listener
 ArrowHandler.prototype.draw = function() {

  if (this.arrowheads.length > 0) {
   for (var i = 0, m; m = this.arrowheads[i]; i++) {
     m.setOptions({ position: this.usePixelOffset(m.p1, m.p2) });
   }
  }
 };


 // Computes the length of a polyline in pixels
 // to adjust the position of the 'head' arrow
 ArrowHandler.prototype.usePixelOffset = function(p1, p2) {

   var proj = this.getProjection();
   var g = google.maps;
   var dist = 12; // Half size of triangle icon

   var pix1 = proj.fromLatLngToContainerPixel(p1);
   var pix2 = proj.fromLatLngToContainerPixel(p2);
   var vector = new g.Point(pix2.x - pix1.x, pix2.y - pix1.y);
   var length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);
   var normal = new g.Point(vector.x/length, vector.y/length);
   var offset = new g.Point(pix2.x - dist * normal.x, pix2.y - dist * normal.y);

   return proj.fromContainerPixelToLatLng(offset);
 };


  // Returns the triangle icon object
 ArrowHandler.prototype.addIcon = function(file) {
   var g = google.maps;
   var icon = { url: "http://www.google.com/mapfiles/" + file,
    size: new g.Size(24, 24), anchor: new g.Point(12, 12) };
   return icon;
  };

  // Creates markers with corresponding triangle icons
 ArrowHandler.prototype.create = function(p1, p2, mode) {
   var markerpos;
   var g = google.maps;
   if (mode == "onset") markerpos = p1;
   else if (mode == "head") markerpos = this.usePixelOffset(p1, p2);
   else if (mode == "midline") markerpos = g.geometry.spherical.interpolate(p1, p2, .5);

   // Compute the bearing of the line in degrees
   var dir = g.geometry.spherical.computeHeading(p1, p2).toFixed(1);
    // round it to a multiple of 3 and correct unusable numbers
    dir = Math.round(dir/3) * 3;
    if (dir < 0) dir += 240;
    if (dir > 117) dir -= 120;
    // use the corresponding icon
    var icon = this.addIcon("dir_" +dir+ ".png");
    var marker = new g.Marker({position: markerpos,
     map: map, icon: icon, clickable: false, strokeColor:"green"
    });
    if (mode == "head") {
     // Store markers with 'head' arrows to adjust their offset position on zoom change
     marker.p1 = p1;
     marker.p2 = p2;
     // marker.setValues({ p1: p1, p2: p2 });
     this.arrowheads.push(marker);
    }
    
  };

 ArrowHandler.prototype.load = function (points, mode) {
    for (var i = 0; i < points.length-1; i++) {
      var p1 = points[i],
      p2 = points[i + 1];
      this.create(p1, p2, mode); 
    }
 };

    
  // Draws a polyline with accordant arrow heads
  function createPoly(markers, mode,gpsData) {
      
      
    var poly = new google.maps.Polyline({
     strokeColor: "#0000ff",
     strokeOpacity: 0.8,
     strokeWeight: 3,
     map: map,
     path: markers });
   
   setArrows.load(markers, mode);  
      
      
   var mar = [];
    var paths = [];
   var gpsData=<?php echo $str;?>;
   var i;
   var infoWindow = new google.maps.InfoWindow();
    for (var i = 0; i < markers.length; i++) {
            var data = gpsData[i];
            
            var marker = new google.maps.Marker({
                position: markers[i],
                map: map,
                title: "Staff Code:" + data.mob_user_staff_code + ",Poll Time:" + data.add_date_time
            });
            mar.push(marker);
            paths.push(marker.position);   
            //Attach click event to the marker.
            (function (marker, data) {
                google.maps.event.addListener(marker, "click", function (e) {
                    //Wrap the content inside an HTML DIV in order to set height and width of InfoWindow.
                    infoWindow.setContent("<div>Staff Code:" + data.mob_user_staff_code + "<br>Poll Time:" + data.add_date_time + "</div>");
                    infoWindow.open(map, marker);
                });
            })(marker, data);
        }
     
      
 
    
      
   
   
   return poly;
  }


function initialize() {
  // Create a simple map.
		map = new google.maps.Map(document.getElementById('map-canvas'), {
    zoom: 12,
    center: {lat: <?php echo $this->current_coord[0]['Current_latitude'];?>, lng: <?php echo $this->current_coord[0]['Current_longitude'];?>}
  });




	var lineSymbol = {
	path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW
	};

	var lineCoordinates = [
	<?php echo $this->path_coords; ?>
	];

	var gpsData=[<?php echo $str;?>];
	setArrows = new ArrowHandler();
	createPoly(lineCoordinates, "midline",gpsData);

	marker.setMap(map);


	}

	google.maps.event.addDomListener(window, 'load', initialize);

    </script>
  </head>
  <body>
 
 <div id="map-canvas"></div>
<pre><?php  //print_r($this->jobs); ?> </pre>
  </body>
</html>

